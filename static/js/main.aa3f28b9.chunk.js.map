{"version":3,"sources":["components/title.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Form","this","props","city","getWeather","changeStateOfInput","toggleWeatherHandler","onSubmit","type","name","value","placeholder","onChange","onClick","React","Component","Weather","cityName","weather","latitude","longitude","temp","tempMax","tempMin","humidity","pressure","wind","noSuchCity","error","API_KEY","App","state","showWeather","event","target","setState","doesShow","e","preventDefault","axios","get","then","response","console","log","data","description","coord","lat","lon","main","temp_max","temp_min","speed","catch","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa3f28b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n    return(\r\n        <div className=\"container mb-3 mt-5 text-center text-light\">\r\n          \r\n              <h1>Local Weather</h1>\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nclass Form extends React.Component { \r\n    render() {\r\n        const {city, getWeather, changeStateOfInput, toggleWeatherHandler} = this.props\r\n        return(\r\n           <form className=\"form-inline mb-4 justify-content-center\" onSubmit={getWeather}>\r\n                <input type='text' \r\n                    name='city' \r\n                    value={city}\r\n                    placeholder='City...'\r\n                    onChange={changeStateOfInput}>\r\n                </input>\r\n                <button onClick={toggleWeatherHandler} className=\"btn btn-warning btn-sm ml-3\">Check Weather</button>\r\n            </form>\r\n                    \r\n        )\r\n    }    \r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = ({city, cityName, weather, latitude, longitude, temp, tempMax, tempMin, humidity, pressure, wind, noSuchCity, error}) => {\r\n    \r\n        return(\r\n            \r\n            <div className=\"container mt-3 text-center text-light\">\r\n                \r\n                    {city && \r\n                        <div>\r\n                            <h3>{cityName}</h3>\r\n                            <h4>{weather}</h4>\r\n                            <div className=\"mt-4\">\r\n                                <h6>Latitude: {latitude}</h6>\r\n                                <h6>Longitude: {longitude}</h6>\r\n                            </div>\r\n                            <div>\r\n                                <h6>Temperature: {temp}&#176;C</h6>\r\n                                <h6>Max temperature: {tempMax}&#176;C</h6>\r\n                                <h6>Min temperature: {tempMin}&#176;C</h6>\r\n                                <h6>Humidity: {humidity}%</h6>\r\n                                <h6>Pressure: {pressure}hPa</h6>\r\n                                <h6>Wind: {wind}m/s</h6>\r\n                            </div>\r\n                        </div>}\r\n                    \r\n                    \r\n            </div>\r\n          \r\n        )\r\n    \r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Title from './components/title';\nimport Form from './components/form';\nimport Weather from './components/weather';\n\n\nconst API_KEY = '05508bb378ad891b493b0c886cca7a57';\n\nclass App extends React.Component {\n  state = {\n    cityName: '',\n    weather: '',\n    latitude: '',\n    longitude: '',\n    temp: '',\n    tempMax: '',\n    tempMin: '',\n    humidity: '',\n    pressure: '',\n    wind: '',\n    error: false,\n    noSuchCity: false,\n    showWeather: false\n  }\n\n  changeStateOfInput = (event) => {\n    const { value, name } = event.target;\n    this.setState({\n      [name]: value,\n      showWeather: false,\n      noSuchCity: false,\n      })\n  }\n\n  toggleWeatherHandler = () => {\n    const doesShow = this.state.showWeather;\n    this.setState({showWeather: doesShow})}\n  \n\n    getWeather= (e) => {\n    e.preventDefault();\n    \n    const {city} = this.state\n  \n    if (city){\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}`)\n      .then(response => {\n      console.log(response);\n        this.setState({\n        cityName: response.data.name,\n        weather: response.data.weather[0].description,\n        latitude: response.data.coord.lat,\n        longitude: response.data.coord.lon,\n        temp: response.data.main.temp,\n        tempMax: response.data.main.temp_max,\n        tempMin: response.data.main.temp_min,\n        humidity: response.data.main.humidity,\n        pressure: response.data.main.pressure,\n        wind: response.data.wind.speed,\n        error: false,\n        noSuchCity: false,\n        showWeather: true\n        })\n       })\n       .catch(error => {\n        console.log(error)\n          this.setState({\n            noSuchCity: true,\n            showWeather: false\n          })\n        }\n      )}\n     else {\n        this.setState({\n          error: true,\n          //noSuchCity: false\n        })\n      }\n    }  \n    \n    render() {\n      const{noSuchCity} = this.state\n      const{city} = this.state\n\n      if (noSuchCity) {\n        return (\n          <div className=\"App\">\n            <Title />\n            <Form getWeather={this.getWeather} \n              toggleWeatherHandler={this.toggleWeatherHandler} \n              changeStateOfInput={this.changeStateOfInput}/>\n        \n            <div className=\"container mt-3 text-center text-light\">\n              <h3>This city does not exist</h3>\n            </div>\n          </div>\n      )} else if (!noSuchCity && city){\n          return (\n            <div className=\"App\">\n              <Title />\n              <Form getWeather={this.getWeather} \n                toggleWeatherHandler={this.toggleWeatherHandler} \n                changeStateOfInput={this.changeStateOfInput}/>\n        \n              {this.state.showWeather ?\n                <div>\n                  <Weather {...this.state}/>\n                </div> : null}\n                </div>);}\n                  \n       else {\n          return (\n              <div className=\"App\">\n                <Title />\n                  <Form getWeather={this.getWeather} \n                      toggleWeatherHandler={this.toggleWeatherHandler} \n                      changeStateOfInput={this.changeStateOfInput}/>\n        \n                    <div className=\"container mt-3 text-center text-light\">\n                      <h3>Please enter a city name</h3>\n                    </div>\n              </div>)}\n        \n          }\n        \n        \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}